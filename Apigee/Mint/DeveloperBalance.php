<?php
/**
 * Created by JetBrains PhpStorm.
 * User: isaias
 * Date: 11/5/13
 * Time: 6:53 PM
 * To change this template use File | Settings | File Templates.
 */

namespace Apigee\Mint;

use Apigee\Mint\DataStructures\SupportedCurrency;

class DeveloperBalance extends Base\BaseObject {

  /**
   * @var DataStructures\SupportedCurrency
   */
  private $supportedCurrency;

  /**
   * @var float
   */
  private $usage;

  /**
   * @var float
   */
  private $amount;

  /**
   * @var string
   */
  private $txReference;

  /**
   * @var string
   */
  private $gatewayTxReference;

  /**
   * @var float
   */
  private $replenishAmount;

  /**
   * @var float
   */
  private $recurringAmount;

  /**
   * @var bool
   */
  private $isRecurring;

  /**
   * @var string
   */
  private $providerId;

  /**
   * @var string
   */
  private $dev;

  /**
   * @var bool
   */
  private $chargePerUsage;

  /**
   * @param string $dev
   * @param \Apigee\Util\OrgConfig $config
   */
  public function __construct($dev, \Apigee\Util\OrgConfig $config) {
    $base_url = '/mint/organizations/' . $config->orgName . '/developers/' . rawurlencode($dev) . '/developer-balances';
    $this->dev = $dev;
    $this->init($config, $base_url);
    $this->wrapperTag = 'developerBalance';
    $this->idField = 'id';
    $this->idIsAutogenerated = FALSE;
    $this->initValues();
  }

  /**
   * Creates a blank instance of __CLASS__ with the same constructor parameters
   * as the class that is doing the instantiation.
   *
   * @return \Apigee\Mint\DeveloperBalance
   */
  public function instantiateNew() {
    return new DeveloperBalance($this->dev, $this->getConfig());
  }

  /**
   * Given an associative array from the raw JSON response, populates the
   * object with that data.
   *
   * @param array $data
   * @param bool  $reset
   *
   * @return void
   */
  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }
    $excluded_properties = array('supportedCurrency');
    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);

      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        self::$logger->notice('No setter method was found for property "' . $property . '"');
      }
    }
    if (isset($data['supportedCurrency'])) {
      $this->supportedCurrency = new SupportedCurrency($data['supportedCurrency']);
    }
  }

  /**
   * Returns all member variables to their default values.
   *
   * @return mixed
   */
  protected function initValues() {
    $this->supportedCurrency = NULL;
    $this->usage = 0;
    $this->amount = 0;
    $this->txReference = NULL;
    $this->gatewayTxReference = NULL;
    $this->replenishAmount = 0;
    $this->recurringAmount = 0;
    $this->isRecurring = FALSE;
    $this->providerId = FALSE;
    $this->chargePerUsage = FALSE;

    // @TODO Remove
    $this->providerId = 'worldpay';
  }

  /**
   * @return float
   */
  public function getAmount() {
    return $this->amount;
  }

  /**
   * @return string
   */
  public function getGatewayTxReference() {
    return $this->gatewayTxReference;
  }

  /**
   * @return boolean
   */
  public function isRecurring() {
    return $this->isRecurring;
  }

  /**
   * @return float
   */
  public function getRecurringAmount() {
    return $this->recurringAmount;
  }

  /**
   * @return string
   */
  public function getProviderId() {
    return $this->providerId;
  }

  /**
   * @return float
   */
  public function getReplenishAmount() {
    return $this->replenishAmount;
  }

  /**
   * @return \Apigee\Mint\DataStructures\SupportedCurrency
   */
  public function getSupportedCurrency() {
    return $this->supportedCurrency;
  }

  /**
   * @return string
   */
  public function getTxReference() {
    return $this->txReference;
  }

  /**
   * @return float
   */
  public function getUsage() {
    return $this->usage;
  }

  /**
   * @param float $amount
   */
  public function setAmount($amount) {
    $this->amount = $amount;
  }

  /**
   * @param string $gatewayTxReference
   */
  public function setGatewayTxReference($gatewayTxReference) {
    $this->gatewayTxReference = $gatewayTxReference;
  }

  /**
   * @param boolean $isRecurring
   */
  public function setIsRecurring($isRecurring) {
    $this->isRecurring = $isRecurring;
  }

  /**
   * @param string $providerId
   */
  public function setProviderId($providerId) {
    $this->providerId = $providerId;
  }

  /**
   * @param float $recurringAmount
   */
  public function setRecurringAmount($recurringAmount) {
    $this->recurringAmount = $recurringAmount;
  }

  /**
   * @param float $replenishAmount
   */
  public function setReplenishAmount($replenishAmount) {
    $this->replenishAmount = $replenishAmount;
  }

  /**
   * @param \Apigee\Mint\DataStructures\SupportedCurrency $supportedCurrency
   */
  public function setSupportedCurrency($supportedCurrency) {
    $this->supportedCurrency = $supportedCurrency;
  }

  /**
   * @param string $txReference
   */
  public function setTxReference($txReference) {
    $this->txReference = $txReference;
  }

  /**
   * @param float $usage
   */
  public function setUsage($usage) {
    $this->usage = $usage;
  }

  /**
   * @param bool $chargePerUsage
   */
  public function setChargePerUsage($chargePerUsage) {
    $this->chargePerUsage = $chargePerUsage;
  }

  /**
   * @return bool
   */
  public function isChargePerUsage() {
    return $this->chargePerUsage;
  }

  /**
   * @param $currencyId
   *
   * @return \Apigee\Mint\DeveloperBalance
   */
  public function getByCurrencyId($currencyId) {
    $options = array(
      'query' => array(
        'currencyId' => $currencyId,
      )
    );
    $this->get(NULL, 'application/json', array(), $options);
    $developerBalanceAPIObj = NULL;
    foreach ($this->responseObj['developerBalance'] as $developerBalance) {
      $developerBalanceAPIObj = $this->instantiateNew();
      $developerBalanceAPIObj->loadFromRawData($developerBalance);
    }
    return $developerBalanceAPIObj;
  }

  /**
   * Update recurring setup
   *
   * @param $supportedCurrencyId
   * @param $isRecurring
   * @param $replenishAmount
   * @param $recurringAmount
   * @param $provider
   */
  public function updateRecurringSetup($supportedCurrencyId, $isRecurring, $replenishAmount, $recurringAmount, $provider) {
    $options = array(
      'query' => array(
        'supportedCurrencyId' => strtolower($supportedCurrencyId),
      ),
    );
    $payload = array(
      'providerId' => $provider,
      'chargePerUsage' => !$isRecurring ? true : false,
      'isRecurring' => $isRecurring ? true : false,
      'recurringAmount' => $recurringAmount,
      'replenishAmount' => $replenishAmount,
    );

    $this->post('recurring-setup', $payload, 'application/json; charset=utf-8', 'application/json; charset=utf-8', array(), $options);
  }

  /**
   * Returns a JSON representation of the object.
   *
   * @return mixed
   */
  public function __toString() {
    // TODO: Implement __toString() method.
  }
}